import { CID } from 'multiformats/cid';
import type { MultibaseDecoder, MultibaseEncoder } from 'multiformats/types/bases/interface';
import type { MultihashDigest } from 'multiformats/types/hashes/interface';
interface PeerIdOptions {
    type: 'RSA' | 'Ed25519' | 'secp256k1';
    multihash: MultihashDigest;
    privateKey?: Uint8Array;
}
interface RSAPeerIdOptions {
    multihash: MultihashDigest;
    privateKey?: Uint8Array;
    publicKey?: Uint8Array;
}
interface Ed25519PeerIdOptions {
    multihash: MultihashDigest;
    privateKey?: Uint8Array;
}
interface Secp256k1PeerIdOptions {
    multihash: MultihashDigest;
    privateKey?: Uint8Array;
}
export declare class PeerId {
    type: 'RSA' | 'Ed25519' | 'secp256k1';
    readonly multihash: MultihashDigest;
    readonly privateKey?: Uint8Array;
    readonly publicKey?: Uint8Array;
    constructor(opts: PeerIdOptions);
    toString(codec?: MultibaseEncoder<any>): string;
    toCID(): CID;
    toBytes(): Uint8Array;
    /**
     * Checks the equality of `this` peer against a given PeerId.
     *
     * @param {Uint8Array|PeerId} id
     * @returns {boolean}
     */
    equals(id: any): boolean;
    static fromString(str: string, decoder?: MultibaseDecoder<any>): Ed25519PeerId | Secp256k1PeerId | RSAPeerId;
    static fromBytes(buf: Uint8Array): Ed25519PeerId | Secp256k1PeerId | RSAPeerId;
    static fromCID(cid: CID): Ed25519PeerId | Secp256k1PeerId | RSAPeerId;
    /**
     * @param publicKey - A marshalled public key
     * @param privateKey - A marshalled private key
     */
    static fromKeys(publicKey: Uint8Array, privateKey?: Uint8Array): Promise<Ed25519PeerId | Secp256k1PeerId | RSAPeerId>;
}
export declare class RSAPeerId extends PeerId {
    readonly type = "RSA";
    readonly publicKey?: Uint8Array;
    constructor(opts: RSAPeerIdOptions);
}
export declare class Ed25519PeerId extends PeerId {
    readonly type = "Ed25519";
    readonly publicKey: Uint8Array;
    constructor(opts: Ed25519PeerIdOptions);
}
export declare class Secp256k1PeerId extends PeerId {
    readonly type = "secp256k1";
    readonly publicKey: Uint8Array;
    constructor(opts: Secp256k1PeerIdOptions);
}
export {};
//# sourceMappingURL=index.d.ts.map